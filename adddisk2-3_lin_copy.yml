---
- name: get folder path of vm, get disk info and backing datastore in vmware,  and add disk for vm
  hosts: localhost
  gather_facts: false
  vars: 
    - ansible_python_interpreter: "/usr/bin/python3"
  vars_files:
   - /home/username/vars/vaulted_creds.yml

  tasks: 
    - set_fact: #set variable
        vm_name: "{{ target_name }}"
        
    - name: "Find folder for VM - {{ vm_name }}"
      vmware_guest_find: 
        hostname: "{{ vcenter_hostname }}"
        username: "{{ vcenter_username }}"
        password: "{{ vcenter_password }}"
        validate_certs: no
        name: "{{ vm_name }}"
      register: vm_facts
      delegate_to: localhost

    - name: get disk info from "{{ vm_name }}"
      vmware_guest_disk_info: 
        hostname: "{{ vcenter_hostname }}"
        username: "{{ vcenter_username }}"
        password: "{{ vcenter_password }}"
        validate_certs: no
        datacenter: "{{ dc }}"
        name: "{{ vm_name }}"
      register: diskinfo
      delegate_to: localhost

    - name: Get Backing datastore for desired disk id
      set_fact:
        disk_zero_datastore: "{{ item.value.backing_datastore }}"
      with_dict: "{{diskinfo.guest_disk_info }}"
      when: item.key == '0'
    - debug:
        msg: "{{ disk_zero_datastore }}"
      when: disk_zero_datastore is defined

    - name: Get controller facts - task to list currently used SCSI Controller Bus Number (controller_key)
      set_fact: 
        controllerFacts: "{{ diskinfo.guest_disk_info.values()| map(attribute='controller_key') | list  }}"   
    
    - name: Get facts - controllerKey
      set_fact: 
        controllerKey: "{{ controllerFacts | sort | last  }}"

    - name: Get fact- unitNumber
      set_fact:
        unitNumber: "{{ diskinfo.guest_disk_info.values() | selectattr('controller_key','equalto',(controllerKey | int))| map(attribute='unit_number')| list | sort | last |int +1 }}"   
        
  
    - name: Get scsi controller number 
      set_fact:
        scsicontrollernumber: "{{ item.value.controller_bus_number }}"
      with_dict: "{{diskinfo.guest_disk_info }}"
      when: item.key == '0'
    - debug:
        msg: "{{scsicontrollernumber}}"
      when: scsicontrollernumber is defined

    #- name: Skip SCSI controller No 7
     
    #  set_fact:
     #   unitNumber: "{{unitNumber | int+1 }}"
     # when: unitNumber == "7"
      
# If hard disk 1 exists at scsi controller unit_number 0:0, add another disk 
    - name: add disks to vm 
      vmware_guest_disk:
        hostname: "{{ vcenter_hostname }}"
        username: "{{ vcenter_username }}"
        password: "{{ vcenter_password }}" 
        datacenter: "{{ dc }}"
        validate_certs: no
        folder: '{{ vm_facts }}'
        name: "{{ vm_name }}"
        disk: 
          - size_gb: "{{ storage_size }}"
            type: thick
            datastore: "{{ disk_zero_datastore}}"
            state: "present"
            scsi_controller: "{{ scsicontrollernumber }}"  
            unit_number: "{{ controllerKey[0:1]}}" 
            scsi_type: "paravirtual"
      delegate_to: "localhost"
      register: add_disk

# If hard disk 2 exists at scsi controller unit_number 0:1, add another 3rd disk. 
# If there is only 1 existing disk at unit 0, this playbook will add 2 more hard disks 2 and 3. Therefore you'd be adding 2 disks to this playbook. 
# only 15 4 scsi controllers per vm
    - name: add disks to vm 
      vmware_guest_disk:
        hostname: "{{ vcenter_hostname }}"
        username: "{{ vcenter_username }}"
        password: "{{ vcenter_password }}" 
        datacenter: "{{ dc }}"
        validate_certs: no
        folder: '{{ vm_facts }}'
        name: "{{ vm_name }}"
        disk: 
          - size_gb: "{{ storage_size }}"
            type: thick
            datastore: "{{ disk_zero_datastore}}"
            state: "present"
            scsi_controller: "{{ scsicontrollernumber }}"  
            unit_number: "{{ controllerKey[0:2]}}" 
            scsi_type: "paravirtual"
      delegate_to: "localhost"
      register: add_disk

  